def check_singularity_image(image_file,cacheDir,pull) {
    image_path = "${cacheDir}/${image_file}"
    if (file(image_path).exists()) {
        return image_path
    } else if (!file(image_file).exists() && pull) {
        log.warn "=============================================================================\n" +
                    "  Singularity image ${image_file} not found in ${cacheDir}\n" +
                    "  Will try to get image from Singularity Hub\n" +
                    "============================================================================="

        file(cacheDir).mkdirs()
        return "shub://address/${image_file}"
    } else if (!file(image_file).exists() && !pull) {
        log.error "=============================================================================\n" +
                    "  Singularity image ${image_file} not found in ${cacheDir} " + 
                    "  Pull from Singularity Hub is disabled. Can not continue!\n" +
                    "  Enable image pull to try to download from Singularity Hub\n" +
                    "============================================================================="
        System.exit(0)
    }
}

process {
    withName: 'mergeBams|deduplicate|sortBams' {
        container = check_singularity_image("AlignDedup-v1.0.sif", singularity.chaceDir,params.singularity_pullImages)
    }
    withName: 'fastqc|coverage|map_flag_stat|somalier|sex_and_relatedness|ancestry|multiqc' {
        container = check_singularity_image("QCbam-v1.0.sif", singularity.chaceDir,params.singularity_pullImages)
    }
    withName: 'deepvariant' {
        container = check_singularity_image("deepvariant-1.0.0.sif", singularity.chaceDir,params.singularity_pullImages)
    }
    withName: 'multisample_vcf' {
        container = check_singularity_image("glnexus-v1.2.6.simg", singularity.chaceDir,params.singularity_pullImages)
    }
    withName: 'normalize_vcf|clean_deepvar_vcf|filter_vcf|bcftools_stats|multiqc_vcf' {
        container = check_singularity_image("VCF_processing.sif", singularity.chaceDir,params.singularity_pullImages)
    }     
    withName: 'estimate_readlength|estimate_libvalues|lumpy|cnvnator|concat_lumpy_calls|merge_lumpy_calls|regenotype_family|copynumber_family|make_family_vcf|prune_family_vcf|svtools_classify|convert_to_bed' {
        container = check_singularity_image("SVpipeline.sif", singularity.chaceDir,params.singularity_pullImages)
    }
    withName: 'fix_family_vcf|quality_filter_sv|lowcomplexity_filter' {
        container = check_singularity_image("SV.annot_filter.sif", singularity.chaceDir,params.singularity_pullImages)
    }
    withName: 'bcftools_ROH||compress_vcf|merge_vcf' {
        container = check_singularity_image("bcftools-v1.10.2.sif", singularity.chaceDir,params.singularity_pullImages)
    } 
    withName: 'exphunter_call' {
        container = check_singularity_image("ExpansionHunter-v3.2.2.sif", singularity.chaceDir,params.singularity_pullImages)
    }    
}